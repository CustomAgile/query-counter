<!DOCTYPE html>
<html>
<head>
    <title>TS Query Counter</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Wed Aug 02 2017 09:07:56 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Aug 02 2017 09:07:56 GMT-0700 (PDT)";
        var STORY    = "N/A";
        var BUILDER  = "marjo60";
        var CHECKSUM = 4359960873;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) 
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->
    
    
    <script type="text/javascript">
        Rally.onReady(function() {
            Ext.define("Rally.technicalservices.InfoLink",{extend:"Rally.ui.dialog.Dialog",alias:"widget.tsinfolink",informationHtml:null,title:"Build Information",defaults:{padding:5,margin:5},closable:!0,draggable:!0,autoShow:!0,width:350,informationalConfig:null,items:[{xtype:"container",itemId:"information"}],initComponent:function(){Ext.id(this);this.title="<span class='icon-help'> </span>"+this.title,this.callParent(arguments)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/var BUILDER  = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=Ext.create("Deft.Deferred"),c=this;return Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){if(text=a.responseText,CHECKSUM){var d=c._generateChecksum(text);if(CHECKSUM!==d)return void b.resolve(!1)}b.resolve(!0)}}),b.promise},_addToContainer:function(a){var b=Ext.apply({xtype:"container",height:200,overflowY:!0},this.informationalConfig);a.add(b)},afterRender:function(){var a=Rally.getApp();if(!Ext.isEmpty(this.informationalConfig)){var b=this.down("#information");this._addToContainer(b)}a.isExternal()?this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"... Running externally"}):this._checkChecksum(a).then({scope:this,success:function(a){a||this.addDocked({xtype:"container",cls:"build-info",dock:"bottom",padding:2,html:'<span class="icon-warning"> </span>Checksums do not match'})},failure:function(a){console.log("oops:",a)}}),this.callParent(arguments)},beforeRender:function(){if(this.callParent(arguments),this.informationHtml&&this.addDocked({xtype:"component",componentCls:"intro-panel",padding:2,html:this.informationHtml,doc:"top"}),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:"This app was created by the CA AC Technical Services Team."}),APP_BUILD_DATE){var a=Ext.String.format("Built on: {0} <br/>Built by: {1}",APP_BUILD_DATE,BUILDER);STORY&&(a=a+"<br/>Source story: "+STORY),this.addDocked({xtype:"container",cls:"build-info",padding:2,dock:"bottom",html:a})}}}),Ext.define("Rally.technicalservices.Logger",{constructor:function(a){Ext.apply(this,a)},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),window.console&&console.log.apply(console,c)}}),Ext.define("Rally.technicalservices.querycounter.Settings",{singleton:!0,getFields:function(a){var b=[];return b.push({name:"counterArtifactType",xtype:"tsrecordtypecombobox",margin:"10px 0 0 0",fieldLabel:"Record Type",valueField:"TypePath",readyEvent:"ready"}),b.push({xtype:"textarea",fieldLabel:"Query",name:"counterQuery",anchor:"100%",cls:"query-field",margin:"0 70 0 0",plugins:[{ptype:"rallyhelpfield",helpId:194},"rallyfieldvalidationui"],validateOnBlur:!1,validateOnChange:!1,validator:function(a){try{return a&&Rally.data.wsapi.Filter.fromQueryString(a),!0}catch(b){return b.message}}}),b.push({xtype:"container",html:'Display Text<br/><span style="color:#999999;"><i>Use {#} to place the results of the count.</i></span>'}),b.push({name:"counterDisplayText",xtype:"rallyrichtexteditor",margin:"10 70 0 80",fieldLabel:"Informational Text"}),b}}),Ext.define("Rally.technicalservices.RecordTypeComboBox",{extend:"Rally.ui.combobox.ComboBox",alias:"widget.tsrecordtypecombobox",constructor:function(a){var b={defaultSelectionPosition:"last",editable:!1,fieldLabel:"Type:",labelWidth:30,context:Rally.environment.getContext(),storeConfig:{autoLoad:!1,remoteFilter:!0,model:Ext.identityFn("TypeDefinition"),sorters:{property:"Name",direction:"Asc"},filters:[{property:"Creatable",operator:"=",value:"true"}]}};a.storeConfig&&(delete a.storeConfig.autoLoad,a.storeConfig.additionalFilters&&(b.storeConfig.filters=b.storeConfig.filters.concat(a.storeConfig.additionalFilters))),this.callParent([Ext.Object.merge(b,a)])},initComponent:function(){this.callParent(),Deft.Promise.all([this._loadStore()]).then({success:function(a){this.on("change",this._onValueChange,this),this.onReady({preferencesLoaded:!0,record:this.getRecord()})},scope:this})},onReady:function(a){a=a||{},a.preferencesLoaded&&(this.fireEvent("select",a.record),this.callParent(arguments))},getSelectedType:function(){return this.getTypeFromRef(this.getValue())},getTypeFromRef:function(a){return this.getStore().findRecord("_ref",a)},getTypeWithOrdinal:function(a){return this.getStore().findRecord("Ordinal",a)},getAllTypeNames:function(){return _.map(this.getStore().getRecords(),function(a){return a.get("TypePath")})},_onValueChange:function(a,b){this.savePreference(b)},_loadStore:function(){var a=new Deft.Deferred;return this.store.load({callback:function(b,c,d){d?a.resolve():a.reject()},scope:this}),a.promise},getPreference:function(){var a=new Deft.Deferred;return Rally.data.PreferenceManager.load(Ext.apply(this._getPreferenceConfig(),{success:function(b){a.resolve(b[this._getPreferenceName()])},scope:this})),a.promise},savePreference:function(a){var b={};b[this._getPreferenceName()]=a,Rally.data.PreferenceManager.update(Ext.apply(this._getPreferenceConfig(),{settings:b}))},_getPreferenceConfig:function(){var a={filterByUser:!0,filterByName:this._getPreferenceName()};return this.context.get&&this.context.get("appID")&&(a.appID=this.context.get("appID")),a},_getPreferenceName:function(){return this.preferenceName+"-"+this.context.getWorkspace().ObjectID},_isPrefValueInStore:function(a){return this.store.findRecord(this.valueField,a)}}),Ext.define("TSQueryCounter",{extend:"Rally.app.App",componentCls:"app",logger:new Rally.technicalservices.Logger,defaults:{margin:10},items:[{xtype:"container",itemId:"display_box",tpl:"<tpl>{displayText}</tpl>"}],config:{defaultSettings:{counterArtifactType:"Defect",counterQuery:"( ObjectID > 0 )",counterDisplayText:"{#}<br/><em>Use the gear to make App Settings...</em>"}},launch:function(){this._reloadModel()},onTimeboxScopeChange:function(a){this.logger.log("onTimeboxScopeChange",a.getQueryFilter().toString()),this._runApp(a)},_timeboxScopeIsValidForArtifactType:function(a,b){if(a){this.logger.log("_timeboxScopeIsValidForArtifactType",a.getType(),this.model,this.model.getField("Iteration"),this.model.getField("Release"),a.getQueryFilter().toString());var c="Release";return"iteration"==a.getType()&&(c="Iteration"),this.model.getField(c)?(this.logger.log("TimeboxScope",a.getType(),"is valid for",b),!0):(this.logger.log("TimeboxScope",a.getType(),"NOT valid for",b),!1)}return this.logger.log("No Timebox Scope"),!0},_reloadModel:function(){Rally.data.ModelFactory.getModel({type:this.getSetting("counterArtifactType"),scope:this,success:function(a){this.model=a,this._runApp(this.getContext().getTimeboxScope())}})},_runApp:function(a){var b=this;this.setLoading("Counting...");var c=this.getSetting("counterArtifactType"),d=this.getSetting("counterQuery"),e=null;a&&this._timeboxScopeIsValidForArtifactType(a,c)&&(e=a.getQueryFilter(),this.logger.log("Using Timebox Scope >>",e.toString())),Ext.isEmpty(d)||(e=e?e.and(Rally.data.wsapi.Filter.fromQueryString(d)):Rally.data.wsapi.Filter.fromQueryString(d));this.down("#display_box");this._loadRecordCount(c,e||[]).then({scope:this,success:function(a){this._updateDisplay(a)},failure:function(a){Ext.Msg.alert("Counter Problem",a)}}).always(function(){b.setLoading(!1)})},_loadRecordCount:function(a,b){var c=Ext.create("Deft.Deferred"),d=this;return this.logger.log("Starting load: model>>",a,"filters>>",b.toString()),Ext.create("Rally.data.wsapi.Store",{model:a,filters:b,limit:1,pageSize:1}).load({callback:function(a,b,e){if(e){d.logger.log("result:",b);var f=b.resultSet.totalRecords||0;c.resolve(f)}else d.logger.log("Failed: ",b),c.reject("Couldn't Load: "+b.error.errors.join(". "))}}),c.promise},_updateDisplay:function(a){this.logger.log("_updateDisplay",a);var b=this.getSetting("counterDisplayText").replace(/\{#}/,a);this.down("#display_box").update(b)},getOptions:function(){return[{text:"About...",handler:this._launchInfo,scope:this}]},_launchInfo:function(){this.about_dialog&&this.about_dialog.destroy(),this.about_dialog=Ext.create("Rally.technicalservices.InfoLink",{informationHtml:"Record Type: "+this.getSetting("counterArtifactType")+"<br/>With Query: "+this.getSetting("counterQuery")+"<br/>"})},isExternal:function(){return"undefined"==typeof this.getAppId()},getSettingsFields:function(){return Rally.technicalservices.querycounter.Settings.getFields()},onSettingsUpdate:function(a){this.logger.log("onSettingsUpdate",a),this._runApp()}});
            
               Rally.launchApp('TSQueryCounter', {
                   name: 'TS Query Counter'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

    </style>

</head>
<body></body>
</html>